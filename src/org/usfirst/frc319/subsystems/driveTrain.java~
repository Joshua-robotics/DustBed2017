package org.usfirst.frc319.subsystems;

import org.usfirst.frc319.RobotMap;
import org.usfirst.frc319.commands.Joystickdrive;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;
import com.sun.glass.ui.Robot;

import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class driveTrain extends Subsystem {

	
    private final CANTalon leftDriveLead = RobotMap.driveTrainleftDriveLead;
    private final CANTalon rightDriveLead = RobotMap.driveTrainrightDriveLead;
    private final CANTalon leftFollow = RobotMap.driveTrainleftFollow;
    private final CANTalon rightFollow = RobotMap.driveTrainrightFollow;
    private final RobotDrive driveTrain = RobotMap.driveTraindriveTrain;
    private final DoubleSolenoid shifter = RobotMap.driveTrainshifter;

 private final RobotDrive arcadedrive = RobotMap.driveTraindriveTrain;
    
    public boolean shift;
    
    StringBuilder _sb = new StringBuilder();
    int _loops = 0;
    
    public driveTrain(){
    	
    	
    	leftDriveLead.changeControlMode(TalonControlMode.PercentVbus);
    	leftFollow.changeControlMode(TalonControlMode.Follower);
    	leftFollow.set(leftDriveLead.getDeviceID());
    	rightDriveLead.changeControlMode(TalonControlMode.PercentVbus);
    	rightFollow.changeControlMode(TalonControlMode.Follower);
    	rightFollow.set(rightDriveLead.getDeviceID());
    	
    	
    	rightDriveLead.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	rightDriveLead.configEncoderCodesPerRev(1024);
    	rightDriveLead.reverseSensor(false);
    	rightDriveLead.reverseOutput(false);
    	
    	leftDriveLead.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	leftDriveLead.configEncoderCodesPerRev(1024);
    	leftDriveLead.reverseSensor(true);
    	leftDriveLead.reverseOutput(true);

    	   
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
    	
    setDefaultCommand(new Joystickdrive());
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    		//setDefaultCommand(new Joystickdrive());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    
  public void arcadedrive(double moveValue, double rotateValue) {
	  
	  arcadedrive.arcadeDrive(moveValue, rotateValue, true);
  
  }
  
  public int getLeftDrivetrainEncoder(){
	  return -leftDriveLead.getEncPosition();
  }
  
  public int getRightDrivetrainEncoder(){
	  return rightDriveLead.getEncPosition();
  }
  
  public void shiftUp(){
	  drivetrainShifter.set(DoubleSolenoid.Value.kForward);
	  
	  shift = false;
  }
  
  public void shiftDown(){
	  drivetrainShifter.set(DoubleSolenoid.Value.kReverse);
	  
	  shift = true;
  }
  
  public void driveTrainPIDTestMode(){
	  SmartDashboard.putInt("motorspeed", rightDriveLead.getEncVelocity());
  	
  	/* get gamepad axis */
  	double leftYstick = Robot.oi.xBoxController.getRawAxis(1);
  	double motorOutput = rightDriveLead.getOutputVoltage() / rightDriveLead.getBusVoltage();
  	/* prepare line to print */
		_sb.append("\tout:");
		_sb.append(motorOutput);
      _sb.append("\tspd:");
      _sb.append(rightDriveLead.getSpeed() );
      
      if(Robot.oi.xBoxController.getRawButton(1)){
      	/* Speed mode */
      	double targetSpeed = Robot.oi.xBoxController.getRawAxis(1) * 370; /* 1500 RPM in either direction */
      	rightDriveLead.changeControlMode(TalonControlMode.Speed);
      	rightDriveLead.set(targetSpeed); /* 1500 RPM in either direction */
      	//_sb.append(_talon.getControlMode() );
      	
      	//System.out.println(_talonFollower.getControlMode() );
      	/* append more signals to print when in speed mode. */
          _sb.append("\terr:");
          _sb.append(rightDriveLead.getClosedLoopError());
          _sb.append("\ttrg:");
          _sb.append(targetSpeed);
      } 
      else if (Robot.oi.xBoxController.getRawButton(2)){
      	rightDriveLead.set(-.6);
      	//System.out.println(_talon.getControlMode() );
      	//System.out.println(_talonFollower.getControlMode() );
      	//System.out.println("constant voltage mode");
      }
      
      else {
      	/* Percent voltage mode */
      	//System.out.println(_talon.getControlMode() );
      	//System.out.println(_talonFollower.getControlMode() );
      	rightLead.changeControlMode(TalonControlMode.PercentVbus);
      	rightLead.set(leftYstick);
      	//System.out.println("joystick vbus mode");
      }

      if(++_loops >= 10) {
      	_loops = 0;
      	System.out.println(_sb.toString());
      }
      _sb.setLength(0);
  }
}
